// SPDX-FileCopyrightText: 2023 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ConfigEmailInitParameters struct {

	// (String) The email from address ie, dont_reply@acme.com
	EmailFrom *string `json:"emailFrom,omitempty" tf:"email_from,omitempty"`

	// (String) The FQDN of the email server
	EmailHost *string `json:"emailHost,omitempty" tf:"email_host,omitempty"`

	// (Boolean) Disables validation of email server certificate Default: false
	EmailInsecure *bool `json:"emailInsecure,omitempty" tf:"email_insecure,omitempty"`

	// (Number) The smtp port for the email server Default: 25
	EmailPort *float64 `json:"emailPort,omitempty" tf:"email_port,omitempty"`

	// (Boolean) Enable SSL for email server connection
	EmailSSL *bool `json:"emailSsl,omitempty" tf:"email_ssl,omitempty"`

	// (String) The username for the email server
	EmailUsername *string `json:"emailUsername,omitempty" tf:"email_username,omitempty"`
}

type ConfigEmailObservation struct {

	// (String) The email from address ie, dont_reply@acme.com
	EmailFrom *string `json:"emailFrom,omitempty" tf:"email_from,omitempty"`

	// (String) The FQDN of the email server
	EmailHost *string `json:"emailHost,omitempty" tf:"email_host,omitempty"`

	// (Boolean) Disables validation of email server certificate Default: false
	EmailInsecure *bool `json:"emailInsecure,omitempty" tf:"email_insecure,omitempty"`

	// (Number) The smtp port for the email server Default: 25
	EmailPort *float64 `json:"emailPort,omitempty" tf:"email_port,omitempty"`

	// (Boolean) Enable SSL for email server connection
	EmailSSL *bool `json:"emailSsl,omitempty" tf:"email_ssl,omitempty"`

	// (String) The username for the email server
	EmailUsername *string `json:"emailUsername,omitempty" tf:"email_username,omitempty"`

	// (String) The ID of this resource.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type ConfigEmailParameters struct {

	// (String) The email from address ie, dont_reply@acme.com
	// +kubebuilder:validation:Optional
	EmailFrom *string `json:"emailFrom,omitempty" tf:"email_from,omitempty"`

	// (String) The FQDN of the email server
	// +kubebuilder:validation:Optional
	EmailHost *string `json:"emailHost,omitempty" tf:"email_host,omitempty"`

	// (Boolean) Disables validation of email server certificate Default: false
	// +kubebuilder:validation:Optional
	EmailInsecure *bool `json:"emailInsecure,omitempty" tf:"email_insecure,omitempty"`

	// (String, Sensitive) The password for the email server
	// +kubebuilder:validation:Optional
	EmailPasswordSecretRef *v1.SecretKeySelector `json:"emailPasswordSecretRef,omitempty" tf:"-"`

	// (Number) The smtp port for the email server Default: 25
	// +kubebuilder:validation:Optional
	EmailPort *float64 `json:"emailPort,omitempty" tf:"email_port,omitempty"`

	// (Boolean) Enable SSL for email server connection
	// +kubebuilder:validation:Optional
	EmailSSL *bool `json:"emailSsl,omitempty" tf:"email_ssl,omitempty"`

	// (String) The username for the email server
	// +kubebuilder:validation:Optional
	EmailUsername *string `json:"emailUsername,omitempty" tf:"email_username,omitempty"`
}

// ConfigEmailSpec defines the desired state of ConfigEmail
type ConfigEmailSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ConfigEmailParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider ConfigEmailInitParameters `json:"initProvider,omitempty"`
}

// ConfigEmailStatus defines the observed state of ConfigEmail.
type ConfigEmailStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ConfigEmailObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// ConfigEmail is the Schema for the ConfigEmails API.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,harbor}
type ConfigEmail struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.emailFrom) || (has(self.initProvider) && has(self.initProvider.emailFrom))",message="spec.forProvider.emailFrom is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.emailHost) || (has(self.initProvider) && has(self.initProvider.emailHost))",message="spec.forProvider.emailHost is a required parameter"
	Spec   ConfigEmailSpec   `json:"spec"`
	Status ConfigEmailStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ConfigEmailList contains a list of ConfigEmails
type ConfigEmailList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []ConfigEmail `json:"items"`
}

// Repository type metadata.
var (
	ConfigEmail_Kind             = "ConfigEmail"
	ConfigEmail_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: ConfigEmail_Kind}.String()
	ConfigEmail_KindAPIVersion   = ConfigEmail_Kind + "." + CRDGroupVersion.String()
	ConfigEmail_GroupVersionKind = CRDGroupVersion.WithKind(ConfigEmail_Kind)
)

func init() {
	SchemeBuilder.Register(&ConfigEmail{}, &ConfigEmailList{})
}
