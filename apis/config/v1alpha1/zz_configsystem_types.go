// SPDX-FileCopyrightText: 2023 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type BannerMessageInitParameters struct {

	// (Boolean) Whether or not the banner message is closable.
	Closable *bool `json:"closable,omitempty" tf:"closable,omitempty"`

	// (String) The date the banner message will start displaying. (Format: MM/DD/YYYY)
	FromDate *string `json:"fromDate,omitempty" tf:"from_date,omitempty"`

	// (String) The message to display in the banner.
	Message *string `json:"message,omitempty" tf:"message,omitempty"`

	// (String) The date the banner message will stop displaying. (Format: MM/DD/YYYY)
	ToDate *string `json:"toDate,omitempty" tf:"to_date,omitempty"`

	// (String) The type of banner message. Can be "info", "warning", "success" or "danger".
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type BannerMessageObservation struct {

	// (Boolean) Whether or not the banner message is closable.
	Closable *bool `json:"closable,omitempty" tf:"closable,omitempty"`

	// (String) The date the banner message will start displaying. (Format: MM/DD/YYYY)
	FromDate *string `json:"fromDate,omitempty" tf:"from_date,omitempty"`

	// (String) The message to display in the banner.
	Message *string `json:"message,omitempty" tf:"message,omitempty"`

	// (String) The date the banner message will stop displaying. (Format: MM/DD/YYYY)
	ToDate *string `json:"toDate,omitempty" tf:"to_date,omitempty"`

	// (String) The type of banner message. Can be "info", "warning", "success" or "danger".
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type BannerMessageParameters struct {

	// (Boolean) Whether or not the banner message is closable.
	// +kubebuilder:validation:Optional
	Closable *bool `json:"closable,omitempty" tf:"closable,omitempty"`

	// (String) The date the banner message will start displaying. (Format: MM/DD/YYYY)
	// +kubebuilder:validation:Optional
	FromDate *string `json:"fromDate,omitempty" tf:"from_date,omitempty"`

	// (String) The message to display in the banner.
	// +kubebuilder:validation:Optional
	Message *string `json:"message" tf:"message,omitempty"`

	// (String) The date the banner message will stop displaying. (Format: MM/DD/YYYY)
	// +kubebuilder:validation:Optional
	ToDate *string `json:"toDate,omitempty" tf:"to_date,omitempty"`

	// (String) The type of banner message. Can be "info", "warning", "success" or "danger".
	// +kubebuilder:validation:Optional
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type ConfigSystemInitParameters struct {

	// (String) The endpoint to forward audit logs to.
	AuditLogForwardEndpoint *string `json:"auditLogForwardEndpoint,omitempty" tf:"audit_log_forward_endpoint,omitempty"`

	// (Block Set) (see below for nested schema)
	BannerMessage []BannerMessageInitParameters `json:"bannerMessage,omitempty" tf:"banner_message,omitempty"`

	// (String) Who can create projects within Harbor. Can be "adminonly" or "everyone"
	ProjectCreationRestriction *string `json:"projectCreationRestriction,omitempty" tf:"project_creation_restriction,omitempty"`

	// (Boolean) Whether or not the system is in read only mode.
	ReadOnly *bool `json:"readOnly,omitempty" tf:"read_only,omitempty"`

	// (String) Robot account prefix.
	RobotNamePrefix *string `json:"robotNamePrefix,omitempty" tf:"robot_name_prefix,omitempty"`

	// (Number) The amount of time in days a robot account will expire.
	RobotTokenExpiration *float64 `json:"robotTokenExpiration,omitempty" tf:"robot_token_expiration,omitempty"`

	// (Boolean) Whether or not to skip update pull time for scanner.
	ScannerSkipUpdatePulltime *bool `json:"scannerSkipUpdatePulltime,omitempty" tf:"scanner_skip_update_pulltime,omitempty"`

	// (Boolean) Whether or not to skip audit log database.
	SkipAuditLogDatabase *bool `json:"skipAuditLogDatabase,omitempty" tf:"skip_audit_log_database,omitempty"`

	// 1 (unlimited).
	StoragePerProject *float64 `json:"storagePerProject,omitempty" tf:"storage_per_project,omitempty"`
}

type ConfigSystemObservation struct {

	// (String) The endpoint to forward audit logs to.
	AuditLogForwardEndpoint *string `json:"auditLogForwardEndpoint,omitempty" tf:"audit_log_forward_endpoint,omitempty"`

	// (Block Set) (see below for nested schema)
	BannerMessage []BannerMessageObservation `json:"bannerMessage,omitempty" tf:"banner_message,omitempty"`

	// (String) The ID of this resource.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// (String) Who can create projects within Harbor. Can be "adminonly" or "everyone"
	ProjectCreationRestriction *string `json:"projectCreationRestriction,omitempty" tf:"project_creation_restriction,omitempty"`

	// (Boolean) Whether or not the system is in read only mode.
	ReadOnly *bool `json:"readOnly,omitempty" tf:"read_only,omitempty"`

	// (String) Robot account prefix.
	RobotNamePrefix *string `json:"robotNamePrefix,omitempty" tf:"robot_name_prefix,omitempty"`

	// (Number) The amount of time in days a robot account will expire.
	RobotTokenExpiration *float64 `json:"robotTokenExpiration,omitempty" tf:"robot_token_expiration,omitempty"`

	// (Boolean) Whether or not to skip update pull time for scanner.
	ScannerSkipUpdatePulltime *bool `json:"scannerSkipUpdatePulltime,omitempty" tf:"scanner_skip_update_pulltime,omitempty"`

	// (Boolean) Whether or not to skip audit log database.
	SkipAuditLogDatabase *bool `json:"skipAuditLogDatabase,omitempty" tf:"skip_audit_log_database,omitempty"`

	// 1 (unlimited).
	StoragePerProject *float64 `json:"storagePerProject,omitempty" tf:"storage_per_project,omitempty"`
}

type ConfigSystemParameters struct {

	// (String) The endpoint to forward audit logs to.
	// +kubebuilder:validation:Optional
	AuditLogForwardEndpoint *string `json:"auditLogForwardEndpoint,omitempty" tf:"audit_log_forward_endpoint,omitempty"`

	// (Block Set) (see below for nested schema)
	// +kubebuilder:validation:Optional
	BannerMessage []BannerMessageParameters `json:"bannerMessage,omitempty" tf:"banner_message,omitempty"`

	// (String) Who can create projects within Harbor. Can be "adminonly" or "everyone"
	// +kubebuilder:validation:Optional
	ProjectCreationRestriction *string `json:"projectCreationRestriction,omitempty" tf:"project_creation_restriction,omitempty"`

	// (Boolean) Whether or not the system is in read only mode.
	// +kubebuilder:validation:Optional
	ReadOnly *bool `json:"readOnly,omitempty" tf:"read_only,omitempty"`

	// (String) Robot account prefix.
	// +kubebuilder:validation:Optional
	RobotNamePrefix *string `json:"robotNamePrefix,omitempty" tf:"robot_name_prefix,omitempty"`

	// (Number) The amount of time in days a robot account will expire.
	// +kubebuilder:validation:Optional
	RobotTokenExpiration *float64 `json:"robotTokenExpiration,omitempty" tf:"robot_token_expiration,omitempty"`

	// (Boolean) Whether or not to skip update pull time for scanner.
	// +kubebuilder:validation:Optional
	ScannerSkipUpdatePulltime *bool `json:"scannerSkipUpdatePulltime,omitempty" tf:"scanner_skip_update_pulltime,omitempty"`

	// (Boolean) Whether or not to skip audit log database.
	// +kubebuilder:validation:Optional
	SkipAuditLogDatabase *bool `json:"skipAuditLogDatabase,omitempty" tf:"skip_audit_log_database,omitempty"`

	// 1 (unlimited).
	// +kubebuilder:validation:Optional
	StoragePerProject *float64 `json:"storagePerProject,omitempty" tf:"storage_per_project,omitempty"`
}

// ConfigSystemSpec defines the desired state of ConfigSystem
type ConfigSystemSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ConfigSystemParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider ConfigSystemInitParameters `json:"initProvider,omitempty"`
}

// ConfigSystemStatus defines the observed state of ConfigSystem.
type ConfigSystemStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ConfigSystemObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// ConfigSystem is the Schema for the ConfigSystems API.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,harbor}
type ConfigSystem struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              ConfigSystemSpec   `json:"spec"`
	Status            ConfigSystemStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ConfigSystemList contains a list of ConfigSystems
type ConfigSystemList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []ConfigSystem `json:"items"`
}

// Repository type metadata.
var (
	ConfigSystem_Kind             = "ConfigSystem"
	ConfigSystem_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: ConfigSystem_Kind}.String()
	ConfigSystem_KindAPIVersion   = ConfigSystem_Kind + "." + CRDGroupVersion.String()
	ConfigSystem_GroupVersionKind = CRDGroupVersion.WithKind(ConfigSystem_Kind)
)

func init() {
	SchemeBuilder.Register(&ConfigSystem{}, &ConfigSystemList{})
}
