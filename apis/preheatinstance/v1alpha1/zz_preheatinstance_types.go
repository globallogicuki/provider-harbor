// SPDX-FileCopyrightText: 2023 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type PreheatInstanceInitParameters struct {

	// (String) The authentication mode for the preheat instance. Must be either "NONE", "BASIC", or "OAUTH". Defaults to "NONE".
	AuthMode *string `json:"authMode,omitempty" tf:"auth_mode,omitempty"`

	// (Boolean) Whether the preheat instance is the default instance. Defaults to false.
	Default *bool `json:"default,omitempty" tf:"default,omitempty"`

	// (String) The description of the preheat instance. Defaults to an empty string.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// (Boolean) Whether the preheat instance is enabled. Defaults to true.
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// (String) The endpoint of the preheat instance.
	Endpoint *string `json:"endpoint,omitempty" tf:"endpoint,omitempty"`

	// (Boolean) Whether to allow insecure connections to the preheat instance. Defaults to false.
	Insecure *bool `json:"insecure,omitempty" tf:"insecure,omitempty"`

	// (String) The name of the preheat instance.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (String) The username for the preheat instance. Required if auth_mode is "BASIC". Defaults to an empty string.
	Username *string `json:"username,omitempty" tf:"username,omitempty"`

	// (String) The vendor of the preheat instance. Must be either "dragonfly" or "kraken".
	Vendor *string `json:"vendor,omitempty" tf:"vendor,omitempty"`
}

type PreheatInstanceObservation struct {

	// (String) The authentication mode for the preheat instance. Must be either "NONE", "BASIC", or "OAUTH". Defaults to "NONE".
	AuthMode *string `json:"authMode,omitempty" tf:"auth_mode,omitempty"`

	// (Boolean) Whether the preheat instance is the default instance. Defaults to false.
	Default *bool `json:"default,omitempty" tf:"default,omitempty"`

	// (String) The description of the preheat instance. Defaults to an empty string.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// (Boolean) Whether the preheat instance is enabled. Defaults to true.
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// (String) The endpoint of the preheat instance.
	Endpoint *string `json:"endpoint,omitempty" tf:"endpoint,omitempty"`

	// (String) The ID of the preheat instance.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// (Boolean) Whether to allow insecure connections to the preheat instance. Defaults to false.
	Insecure *bool `json:"insecure,omitempty" tf:"insecure,omitempty"`

	// (String) The name of the preheat instance.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (String) The username for the preheat instance. Required if auth_mode is "BASIC". Defaults to an empty string.
	Username *string `json:"username,omitempty" tf:"username,omitempty"`

	// (String) The vendor of the preheat instance. Must be either "dragonfly" or "kraken".
	Vendor *string `json:"vendor,omitempty" tf:"vendor,omitempty"`
}

type PreheatInstanceParameters struct {

	// (String) The authentication mode for the preheat instance. Must be either "NONE", "BASIC", or "OAUTH". Defaults to "NONE".
	// +kubebuilder:validation:Optional
	AuthMode *string `json:"authMode,omitempty" tf:"auth_mode,omitempty"`

	// (Boolean) Whether the preheat instance is the default instance. Defaults to false.
	// +kubebuilder:validation:Optional
	Default *bool `json:"default,omitempty" tf:"default,omitempty"`

	// (String) The description of the preheat instance. Defaults to an empty string.
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// (Boolean) Whether the preheat instance is enabled. Defaults to true.
	// +kubebuilder:validation:Optional
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// (String) The endpoint of the preheat instance.
	// +kubebuilder:validation:Optional
	Endpoint *string `json:"endpoint,omitempty" tf:"endpoint,omitempty"`

	// (Boolean) Whether to allow insecure connections to the preheat instance. Defaults to false.
	// +kubebuilder:validation:Optional
	Insecure *bool `json:"insecure,omitempty" tf:"insecure,omitempty"`

	// (String) The name of the preheat instance.
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (String, Sensitive) The password for the preheat instance. Required if auth_mode is "BASIC". Defaults to an empty string.
	// +kubebuilder:validation:Optional
	PasswordSecretRef *v1.SecretKeySelector `json:"passwordSecretRef,omitempty" tf:"-"`

	// (String, Sensitive) The token for the preheat instance. Required if auth_mode is "OAUTH". Defaults to an empty string.
	// +kubebuilder:validation:Optional
	TokenSecretRef *v1.SecretKeySelector `json:"tokenSecretRef,omitempty" tf:"-"`

	// (String) The username for the preheat instance. Required if auth_mode is "BASIC". Defaults to an empty string.
	// +kubebuilder:validation:Optional
	Username *string `json:"username,omitempty" tf:"username,omitempty"`

	// (String) The vendor of the preheat instance. Must be either "dragonfly" or "kraken".
	// +kubebuilder:validation:Optional
	Vendor *string `json:"vendor,omitempty" tf:"vendor,omitempty"`
}

// PreheatInstanceSpec defines the desired state of PreheatInstance
type PreheatInstanceSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     PreheatInstanceParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider PreheatInstanceInitParameters `json:"initProvider,omitempty"`
}

// PreheatInstanceStatus defines the observed state of PreheatInstance.
type PreheatInstanceStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        PreheatInstanceObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// PreheatInstance is the Schema for the PreheatInstances API.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,harbor}
type PreheatInstance struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.endpoint) || (has(self.initProvider) && has(self.initProvider.endpoint))",message="spec.forProvider.endpoint is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || (has(self.initProvider) && has(self.initProvider.name))",message="spec.forProvider.name is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.vendor) || (has(self.initProvider) && has(self.initProvider.vendor))",message="spec.forProvider.vendor is a required parameter"
	Spec   PreheatInstanceSpec   `json:"spec"`
	Status PreheatInstanceStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// PreheatInstanceList contains a list of PreheatInstances
type PreheatInstanceList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []PreheatInstance `json:"items"`
}

// Repository type metadata.
var (
	PreheatInstance_Kind             = "PreheatInstance"
	PreheatInstance_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: PreheatInstance_Kind}.String()
	PreheatInstance_KindAPIVersion   = PreheatInstance_Kind + "." + CRDGroupVersion.String()
	PreheatInstance_GroupVersionKind = CRDGroupVersion.WithKind(PreheatInstance_Kind)
)

func init() {
	SchemeBuilder.Register(&PreheatInstance{}, &PreheatInstanceList{})
}
