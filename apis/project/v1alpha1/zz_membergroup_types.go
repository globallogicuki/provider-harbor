// SPDX-FileCopyrightText: 2023 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type MemberGroupInitParameters struct {

	// (Number) 3. Note: group type 3 is OIDC group.
	GroupID *float64 `json:"groupId,omitempty" tf:"group_id,omitempty"`

	// (String) The name of the group member entity.
	GroupName *string `json:"groupName,omitempty" tf:"group_name,omitempty"`

	// (String) The distinguished name of the group within AD/LDAP.
	LdapGroupDn *string `json:"ldapGroupDn,omitempty" tf:"ldap_group_dn,omitempty"`

	// (String) The permissions that the entity will be granted.
	Role *string `json:"role,omitempty" tf:"role,omitempty"`

	// (String) The group type.  Can be set to "ldap", "internal" or "oidc".
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type MemberGroupObservation struct {

	// (Number) 3. Note: group type 3 is OIDC group.
	GroupID *float64 `json:"groupId,omitempty" tf:"group_id,omitempty"`

	// (String) The name of the group member entity.
	GroupName *string `json:"groupName,omitempty" tf:"group_name,omitempty"`

	// (String) The ID of this resource.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// (String) The distinguished name of the group within AD/LDAP.
	LdapGroupDn *string `json:"ldapGroupDn,omitempty" tf:"ldap_group_dn,omitempty"`

	// (Number)
	MemberID *float64 `json:"memberId,omitempty" tf:"member_id,omitempty"`

	// (String) The project id of the project that the entity will have access to.
	ProjectID *string `json:"projectId,omitempty" tf:"project_id,omitempty"`

	// (String) The permissions that the entity will be granted.
	Role *string `json:"role,omitempty" tf:"role,omitempty"`

	// (String) The group type.  Can be set to "ldap", "internal" or "oidc".
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type MemberGroupParameters struct {

	// (Number) 3. Note: group type 3 is OIDC group.
	// +kubebuilder:validation:Optional
	GroupID *float64 `json:"groupId,omitempty" tf:"group_id,omitempty"`

	// (String) The name of the group member entity.
	// +kubebuilder:validation:Optional
	GroupName *string `json:"groupName,omitempty" tf:"group_name,omitempty"`

	// (String) The distinguished name of the group within AD/LDAP.
	// +kubebuilder:validation:Optional
	LdapGroupDn *string `json:"ldapGroupDn,omitempty" tf:"ldap_group_dn,omitempty"`

	// (String) The project id of the project that the entity will have access to.
	// +crossplane:generate:reference:type=github.com/globallogicuki/provider-harbor/apis/project/v1alpha1.Project
	// +kubebuilder:validation:Optional
	ProjectID *string `json:"projectId,omitempty" tf:"project_id,omitempty"`

	// Reference to a Project in project to populate projectId.
	// +kubebuilder:validation:Optional
	ProjectIDRef *v1.Reference `json:"projectIdRef,omitempty" tf:"-"`

	// Selector for a Project in project to populate projectId.
	// +kubebuilder:validation:Optional
	ProjectIDSelector *v1.Selector `json:"projectIdSelector,omitempty" tf:"-"`

	// (String) The permissions that the entity will be granted.
	// +kubebuilder:validation:Optional
	Role *string `json:"role,omitempty" tf:"role,omitempty"`

	// (String) The group type.  Can be set to "ldap", "internal" or "oidc".
	// +kubebuilder:validation:Optional
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

// MemberGroupSpec defines the desired state of MemberGroup
type MemberGroupSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     MemberGroupParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider MemberGroupInitParameters `json:"initProvider,omitempty"`
}

// MemberGroupStatus defines the observed state of MemberGroup.
type MemberGroupStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        MemberGroupObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// MemberGroup is the Schema for the MemberGroups API.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,harbor}
type MemberGroup struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.role) || (has(self.initProvider) && has(self.initProvider.role))",message="spec.forProvider.role is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.type) || (has(self.initProvider) && has(self.initProvider.type))",message="spec.forProvider.type is a required parameter"
	Spec   MemberGroupSpec   `json:"spec"`
	Status MemberGroupStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// MemberGroupList contains a list of MemberGroups
type MemberGroupList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []MemberGroup `json:"items"`
}

// Repository type metadata.
var (
	MemberGroup_Kind             = "MemberGroup"
	MemberGroup_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: MemberGroup_Kind}.String()
	MemberGroup_KindAPIVersion   = MemberGroup_Kind + "." + CRDGroupVersion.String()
	MemberGroup_GroupVersionKind = CRDGroupVersion.WithKind(MemberGroup_Kind)
)

func init() {
	SchemeBuilder.Register(&MemberGroup{}, &MemberGroupList{})
}
