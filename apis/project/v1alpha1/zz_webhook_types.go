// SPDX-FileCopyrightText: 2023 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type WebhookInitParameters struct {

	// (String) The address of the webhook.
	Address *string `json:"address,omitempty" tf:"address,omitempty"`

	// (String) authentication header for you the webhook.
	AuthHeader *string `json:"authHeader,omitempty" tf:"auth_header,omitempty"`

	// (String) A description of the webhook.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// (Boolean) To enable / disable the webhook. Default true.
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// (List of String) The type events you want to subscript to can be
	EventsTypes []*string `json:"eventsTypes,omitempty" tf:"events_types,omitempty"`

	// (String) The name of the webhook that will be created in harbor.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (String) The notification type either http or slack.
	NotifyType *string `json:"notifyType,omitempty" tf:"notify_type,omitempty"`

	// (String) The project id of the harbor that webhook related to.
	ProjectID *string `json:"projectId,omitempty" tf:"project_id,omitempty"`

	// (Boolean) checks the for validate SSL certificate.
	SkipCertVerify *bool `json:"skipCertVerify,omitempty" tf:"skip_cert_verify,omitempty"`
}

type WebhookObservation struct {

	// (String) The address of the webhook.
	Address *string `json:"address,omitempty" tf:"address,omitempty"`

	// (String) authentication header for you the webhook.
	AuthHeader *string `json:"authHeader,omitempty" tf:"auth_header,omitempty"`

	// (String) A description of the webhook.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// (Boolean) To enable / disable the webhook. Default true.
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// (List of String) The type events you want to subscript to can be
	EventsTypes []*string `json:"eventsTypes,omitempty" tf:"events_types,omitempty"`

	// (String) The ID of this resource.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// (String) The name of the webhook that will be created in harbor.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (String) The notification type either http or slack.
	NotifyType *string `json:"notifyType,omitempty" tf:"notify_type,omitempty"`

	// (String) The project id of the harbor that webhook related to.
	ProjectID *string `json:"projectId,omitempty" tf:"project_id,omitempty"`

	// (Boolean) checks the for validate SSL certificate.
	SkipCertVerify *bool `json:"skipCertVerify,omitempty" tf:"skip_cert_verify,omitempty"`
}

type WebhookParameters struct {

	// (String) The address of the webhook.
	// +kubebuilder:validation:Optional
	Address *string `json:"address,omitempty" tf:"address,omitempty"`

	// (String) authentication header for you the webhook.
	// +kubebuilder:validation:Optional
	AuthHeader *string `json:"authHeader,omitempty" tf:"auth_header,omitempty"`

	// (String) A description of the webhook.
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// (Boolean) To enable / disable the webhook. Default true.
	// +kubebuilder:validation:Optional
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// (List of String) The type events you want to subscript to can be
	// +kubebuilder:validation:Optional
	EventsTypes []*string `json:"eventsTypes,omitempty" tf:"events_types,omitempty"`

	// (String) The name of the webhook that will be created in harbor.
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (String) The notification type either http or slack.
	// +kubebuilder:validation:Optional
	NotifyType *string `json:"notifyType,omitempty" tf:"notify_type,omitempty"`

	// (String) The project id of the harbor that webhook related to.
	// +kubebuilder:validation:Optional
	ProjectID *string `json:"projectId,omitempty" tf:"project_id,omitempty"`

	// (Boolean) checks the for validate SSL certificate.
	// +kubebuilder:validation:Optional
	SkipCertVerify *bool `json:"skipCertVerify,omitempty" tf:"skip_cert_verify,omitempty"`
}

// WebhookSpec defines the desired state of Webhook
type WebhookSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     WebhookParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider WebhookInitParameters `json:"initProvider,omitempty"`
}

// WebhookStatus defines the observed state of Webhook.
type WebhookStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        WebhookObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// Webhook is the Schema for the Webhooks API.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,harbor}
type Webhook struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.address) || (has(self.initProvider) && has(self.initProvider.address))",message="spec.forProvider.address is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.eventsTypes) || (has(self.initProvider) && has(self.initProvider.eventsTypes))",message="spec.forProvider.eventsTypes is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || (has(self.initProvider) && has(self.initProvider.name))",message="spec.forProvider.name is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.notifyType) || (has(self.initProvider) && has(self.initProvider.notifyType))",message="spec.forProvider.notifyType is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.projectId) || (has(self.initProvider) && has(self.initProvider.projectId))",message="spec.forProvider.projectId is a required parameter"
	Spec   WebhookSpec   `json:"spec"`
	Status WebhookStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// WebhookList contains a list of Webhooks
type WebhookList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Webhook `json:"items"`
}

// Repository type metadata.
var (
	Webhook_Kind             = "Webhook"
	Webhook_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Webhook_Kind}.String()
	Webhook_KindAPIVersion   = Webhook_Kind + "." + CRDGroupVersion.String()
	Webhook_GroupVersionKind = CRDGroupVersion.WithKind(Webhook_Kind)
)

func init() {
	SchemeBuilder.Register(&Webhook{}, &WebhookList{})
}
